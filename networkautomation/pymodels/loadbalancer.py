# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_loadbalancer_loadbalancer__loadbalancer(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module loadbalancer - based on the path /loadbalancer. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__admin_state_up','__name','__provider','__project_id','__address','__port_id','__subnet_id','__network_id',)

  _yang_name = 'loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__admin_state_up = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="admin-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__provider = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'octavia': {}, 'a10': {}},), default=six.text_type("octavia"), is_leaf=True, yang_name="provider", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    self.__project_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="project-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__address = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)
    self.__port_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="port-id", parent=self, choice=('vip-network-input', 'port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__subnet_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subnet-id", parent=self, choice=('vip-network-input', 'subnet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__network_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="network-id", parent=self, choice=('vip-network-input', 'network'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['loadbalancer']

  def _get_admin_state_up(self):
    """
    Getter method for admin_state_up, mapped from YANG variable /loadbalancer/admin_state_up (boolean)

    YANG Description: The administrative state of the resource, which is up (true) or down (false).
    """
    return self.__admin_state_up
      
  def _set_admin_state_up(self, v, load=False):
    """
    Setter method for admin_state_up, mapped from YANG variable /loadbalancer/admin_state_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_state_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_state_up() directly.

    YANG Description: The administrative state of the resource, which is up (true) or down (false).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="admin-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_state_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="admin-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)""",
        })

    self.__admin_state_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_state_up(self):
    self.__admin_state_up = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="admin-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /loadbalancer/name (string)

    YANG Description: Name of the load balancer
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /loadbalancer/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the load balancer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_provider(self):
    """
    Getter method for provider, mapped from YANG variable /loadbalancer/provider (enumeration)

    YANG Description: Provider name for the load balancer.
    """
    return self.__provider
      
  def _set_provider(self, v, load=False):
    """
    Setter method for provider, mapped from YANG variable /loadbalancer/provider (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_provider is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_provider() directly.

    YANG Description: Provider name for the load balancer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'octavia': {}, 'a10': {}},), default=six.text_type("octavia"), is_leaf=True, yang_name="provider", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """provider must be of a type compatible with enumeration""",
          'defined-type': "loadbalancer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'octavia': {}, 'a10': {}},), default=six.text_type("octavia"), is_leaf=True, yang_name="provider", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)""",
        })

    self.__provider = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_provider(self):
    self.__provider = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'octavia': {}, 'a10': {}},), default=six.text_type("octavia"), is_leaf=True, yang_name="provider", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)


  def _get_project_id(self):
    """
    Getter method for project_id, mapped from YANG variable /loadbalancer/project_id (string)

    YANG Description: The ID of the project owning this resource.
    """
    return self.__project_id
      
  def _set_project_id(self, v, load=False):
    """
    Setter method for project_id, mapped from YANG variable /loadbalancer/project_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_project_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_project_id() directly.

    YANG Description: The ID of the project owning this resource.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="project-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """project_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="project-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__project_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_project_id(self):
    self.__project_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="project-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_address(self):
    """
    Getter method for address, mapped from YANG variable /loadbalancer/address (inet:ip-address)

    YANG Description: The IP address of the loadbalancer
    """
    return self.__address
      
  def _set_address(self, v, load=False):
    """
    Setter method for address, mapped from YANG variable /loadbalancer/address (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_address() directly.

    YANG Description: The IP address of the loadbalancer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """address must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_address(self):
    self.__address = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)


  def _get_port_id(self):
    """
    Getter method for port_id, mapped from YANG variable /loadbalancer/port_id (string)

    YANG Description: Providing a neutron port ID for the vip_port_id tells octavia to use this port for the VIP
    """
    return self.__port_id
      
  def _set_port_id(self, v, load=False):
    """
    Setter method for port_id, mapped from YANG variable /loadbalancer/port_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_id() directly.

    YANG Description: Providing a neutron port ID for the vip_port_id tells octavia to use this port for the VIP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="port-id", parent=self, choice=('vip-network-input', 'port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="port-id", parent=self, choice=('vip-network-input', 'port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__port_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_id(self):
    self.__port_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="port-id", parent=self, choice=('vip-network-input', 'port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_subnet_id(self):
    """
    Getter method for subnet_id, mapped from YANG variable /loadbalancer/subnet_id (string)

    YANG Description: The ID of the subnet for the Virtual IP (VIP)
    """
    return self.__subnet_id
      
  def _set_subnet_id(self, v, load=False):
    """
    Setter method for subnet_id, mapped from YANG variable /loadbalancer/subnet_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subnet_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subnet_id() directly.

    YANG Description: The ID of the subnet for the Virtual IP (VIP)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subnet-id", parent=self, choice=('vip-network-input', 'subnet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subnet_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subnet-id", parent=self, choice=('vip-network-input', 'subnet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__subnet_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subnet_id(self):
    self.__subnet_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subnet-id", parent=self, choice=('vip-network-input', 'subnet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_network_id(self):
    """
    Getter method for network_id, mapped from YANG variable /loadbalancer/network_id (string)

    YANG Description: The ID of the network for the Virtual IP (VIP).
    """
    return self.__network_id
      
  def _set_network_id(self, v, load=False):
    """
    Setter method for network_id, mapped from YANG variable /loadbalancer/network_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network_id() directly.

    YANG Description: The ID of the network for the Virtual IP (VIP).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="network-id", parent=self, choice=('vip-network-input', 'network'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="network-id", parent=self, choice=('vip-network-input', 'network'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__network_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network_id(self):
    self.__network_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="network-id", parent=self, choice=('vip-network-input', 'network'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='string', is_config=True)

  admin_state_up = __builtin__.property(_get_admin_state_up, _set_admin_state_up)
  name = __builtin__.property(_get_name, _set_name)
  provider = __builtin__.property(_get_provider, _set_provider)
  project_id = __builtin__.property(_get_project_id, _set_project_id)
  address = __builtin__.property(_get_address, _set_address)
  port_id = __builtin__.property(_get_port_id, _set_port_id)
  subnet_id = __builtin__.property(_get_subnet_id, _set_subnet_id)
  network_id = __builtin__.property(_get_network_id, _set_network_id)

  __choices__ = {'vip-network-input': {'port': ['port_id'], 'subnet': ['subnet_id'], 'network': ['network_id']}}
  _pyangbind_elements = OrderedDict([('admin_state_up', admin_state_up), ('name', name), ('provider', provider), ('project_id', project_id), ('address', address), ('port_id', port_id), ('subnet_id', subnet_id), ('network_id', network_id), ])


class loadbalancer(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module loadbalancer - based on the path /loadbalancer. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__loadbalancer',)

  _yang_name = 'loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__loadbalancer = YANGDynClass(base=yc_loadbalancer_loadbalancer__loadbalancer, is_container='container', yang_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_loadbalancer(self):
    """
    Getter method for loadbalancer, mapped from YANG variable /loadbalancer (container)
    """
    return self.__loadbalancer
      
  def _set_loadbalancer(self, v, load=False):
    """
    Setter method for loadbalancer, mapped from YANG variable /loadbalancer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loadbalancer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loadbalancer() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_loadbalancer_loadbalancer__loadbalancer, is_container='container', yang_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loadbalancer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_loadbalancer_loadbalancer__loadbalancer, is_container='container', yang_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='container', is_config=True)""",
        })

    self.__loadbalancer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loadbalancer(self):
    self.__loadbalancer = YANGDynClass(base=yc_loadbalancer_loadbalancer__loadbalancer, is_container='container', yang_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:etsi:osm:yang:augments:load-balancer', defining_module='loadbalancer', yang_type='container', is_config=True)

  loadbalancer = __builtin__.property(_get_loadbalancer, _set_loadbalancer)


  _pyangbind_elements = OrderedDict([('loadbalancer', loadbalancer), ])


